function nonNullable(value, message) {
  if (typeof value === "undefined" || value == null) {
    const msg = typeof message === "function" ? message() : message;
    throw new Error(msg ?? `Expected defined value, but received ${value}`);
  }
  return value;
}
function invariant(condition, message) {
  if (condition) {
    return;
  }
  throw new Error(message ?? "Invariant failed");
}
function nonexhaustive(value) {
  throw new Error(`NonExhaustive value: ${value}`);
}

export { nonexhaustive as a, invariant as i, nonNullable as n };
