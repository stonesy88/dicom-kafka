import { H as HexColorLiteral, T as ThemeColorValues, b as LikeC4Theme } from './shared/core.DJvmfnEi.mjs';
export { ag as AbstractRelation, a1 as AllNever, a2 as AndOperator, O as AnyParsedLikeC4ModelData, aT as AutoLayoutDirection, aW as BBox, aU as BasicElementView, aV as BasicView, p as BorderStyle, B as BorderStyles, ap as Color, aq as ColorLiteral, aX as ComputedDeploymentView, aY as ComputedDynamicView, aZ as ComputedEdge, a_ as ComputedElementView, C as ComputedLikeC4ModelData, az as ComputedNode, a as ComputedView, a$ as CustomColorDefinitions, ad as DefaultArrowType, j as DefaultElementShape, ae as DefaultLineStyle, k as DefaultPaddingSize, af as DefaultRelationshipColor, l as DefaultShapeSize, m as DefaultTextSize, n as DefaultThemeColor, c as DeployedInstance, D as DeploymentElement, d as DeploymentElementStyle, e as DeploymentNode, f as DeploymentNodeKind, g as DeploymentNodeKindSpecification, h as DeploymentRef, i as DeploymentRelation, b0 as DeploymentView, b1 as DeploymentViewRule, b2 as DeploymentViewRulePredicate, b3 as DeploymentViewRuleStyle, b4 as DiagramEdge, aA as DiagramNode, b5 as DiagramView, b6 as DynamicView, b7 as DynamicViewIncludeRule, b8 as DynamicViewParallelSteps, b9 as DynamicViewRule, ba as DynamicViewStep, bb as DynamicViewStepOrParallel, bc as EdgeId, q as Element, E as ElementKind, r as ElementKindSpecification, s as ElementKindSpecificationStyle, bw as ElementNotation, t as ElementShape, o as ElementShapes, u as ElementStyle, as as ElementThemeColorValues, ar as ElementThemeColors, bd as ElementView, a3 as EqualOperator, y as ExpressionV2, be as ExtendsElementView, a4 as Filterable, F as FqnExpr, z as FqnRef, Q as GenericLikeC4ModelData, G as GlobalDynamicPredicates, A as GlobalPredicateId, I as GlobalPredicates, J as GlobalStyleID, K as GlobalStyles, a5 as KindEqual, S as LayoutedLikeC4ModelData, U as LikeC4ModelDump, L as LikeC4View, v as Link, N as ModelGlobals, M as ModelLayer, ah as ModelRelation, bf as NodeId, a6 as NotOperator, a7 as OperatorPredicate, a8 as OrOperator, V as ParsedLikeC4ModelData, a9 as Participant, aa as ParticipantOperator, P as PredicateSelector, R as RelationExpr, ai as RelationId, aj as RelationshipArrowType, ak as RelationshipKind, al as RelationshipKindSpecification, am as RelationshipLineType, au as RelationshipThemeColorValues, at as RelationshipThemeColors, bg as ScopedElementView, av as ShapeSize, aw as SpacingSize, bh as StepEdgeId, bi as StepEdgeIdLiteral, ab as TagEqual, w as TagSpec, ax as TextSize, ay as ThemeColor, ao as ThemeColors, x as TypedElement, bj as ViewAutoLayout, bk as ViewId, bl as ViewManualLayout, bm as ViewRule, bn as ViewRuleAutoLayout, bo as ViewRuleGlobalPredicateRef, bp as ViewRuleGlobalStyle, bq as ViewRuleGroup, br as ViewRulePredicate, bs as ViewRuleStyle, bt as ViewRuleStyleOrGlobalRef, bu as ViewWithHash, bv as ViewWithNotation, ac as WhereOperator, aB as extractStep, aC as getBBoxCenter, aD as getParallelStepsPrefix, W as isAndOperator, aE as isAutoLayoutDirection, aF as isDeploymentView, aG as isDynamicView, aH as isDynamicViewParallelSteps, aI as isElementView, aJ as isExtendsElementView, X as isKindEqual, Y as isNotOperator, Z as isOrOperator, _ as isParticipantOperator, aK as isScopedElementView, aL as isStepEdgeId, $ as isTagEqual, an as isThemeColor, aM as isViewRuleAutoLayout, aN as isViewRuleGlobalPredicateRef, aO as isViewRuleGlobalStyle, aP as isViewRuleGroup, aQ as isViewRulePredicate, aR as isViewRuleStyle, aS as stepEdgeId, a0 as whereOperatorAsPredicate } from './shared/core.DJvmfnEi.mjs';
export { BiMap, DefaultMap, DefaultWeakMap, LinkedList, MultiMap, Queue, Stack, commonHead, compareNatural, compareRelations, delay, difference, equalsSet, getOrCreate, hasAtLeast, ifilter, ifind, iflat, imap, intersection, ireduce, isIterable, isNonEmptyArray, isString, isome, iunique, objectHash, stringHash, symmetricDifference, toArray, toSet, union } from './utils/index.mjs';
export { A as AnyAux, b as Aux, C as ComputeViewResult, D as DeployedInstanceModel, d as DeploymentElementModel, e as DeploymentNodeModel, f as DeploymentRelationModel, g as EdgeModel, E as ElementModel, h as LikeC4DeploymentModel, L as LikeC4Model, i as LikeC4ViewModel, N as NodeModel, R as RelationshipModel, c as computeView, a as computeViews, u as unsafeComputeView } from './shared/core.CiFKryGW.mjs';
export { C as Connection, a as ConnectionModel, D as DeploymentConnectionModel } from './shared/core.CZR9J1Qx.mjs';
export { A as AsFqn, C as CustomColor, E as ExclusiveUnion, F as Fqn, G as GlobalFqn, d as IconUrl, I as IteratorLike, K as KeysOf, b as NTuple, N as NonEmptyArray, a as NonEmptyReadonlyArray, P as Point, c as Predicate, e as ProjectId, T as Tag, X as XYPoint, i as isGlobalFqn, s as splitGlobalFqn } from './shared/core.SjLhMA7a.mjs';
export { OverviewGraph, ViewChange } from './types/index.mjs';
export { I as IterableContainer, R as ReorderedArray, a as ancestorsFqn, c as commonAncestor, b as compareByFqnHierarchically, d as compareFqnHierarchically, h as hierarchyDistance, e as hierarchyLevel, i as isAncestor, f as isDescendantOf, g as isSameHierarchy, n as nameFromFqn, p as parentFqn, s as sortByFqnHierarchically, j as sortNaturalByFqn, k as sortParentsFirst } from './shared/core.D2830qgg.mjs';
import 'type-fest';

declare const ElementColors: {
    readonly primary: {
        fill: "#3b82f6";
        stroke: "#2563eb";
        hiContrast: "#eff6ff";
        loContrast: "#bfdbfe";
    };
    readonly blue: {
        fill: "#3b82f6";
        stroke: "#2563eb";
        hiContrast: "#eff6ff";
        loContrast: "#bfdbfe";
    };
    readonly secondary: {
        fill: "#0284c7";
        stroke: "#0369a1";
        hiContrast: "#f0f9ff";
        loContrast: "#B6ECF7";
    };
    readonly sky: {
        fill: "#0284c7";
        stroke: "#0369a1";
        hiContrast: "#f0f9ff";
        loContrast: "#B6ECF7";
    };
    readonly muted: {
        fill: "#64748b";
        stroke: "#475569";
        hiContrast: "#f8fafc";
        loContrast: "#cbd5e1";
    };
    readonly slate: {
        fill: "#64748b";
        stroke: "#475569";
        hiContrast: "#f8fafc";
        loContrast: "#cbd5e1";
    };
    readonly gray: {
        readonly fill: "#737373";
        readonly stroke: "#525252";
        readonly hiContrast: "#fafafa";
        readonly loContrast: "#d4d4d4";
    };
    readonly red: {
        readonly fill: "#AC4D39";
        readonly stroke: "#853A2D";
        readonly hiContrast: "#FBD3CB";
        readonly loContrast: "#f5b2a3";
    };
    readonly green: {
        readonly fill: "#428a4f";
        readonly stroke: "#2d5d39";
        readonly hiContrast: "#f8fafc";
        readonly loContrast: "#c2f0c2";
    };
    readonly amber: {
        readonly fill: "#A35829";
        readonly stroke: "#7E451D";
        readonly hiContrast: "#FFE0C2";
        readonly loContrast: "#f9b27c";
    };
    readonly indigo: {
        readonly fill: "#6366f1";
        readonly stroke: "#4f46e5";
        readonly hiContrast: "#eef2ff";
        readonly loContrast: "#c7d2fe";
    };
};

declare const RelationshipColors: {
    amber: {
        lineColor: "#b45309";
        labelBgColor: "#78350f";
        labelColor: "#FFE0C2";
    };
    blue: {
        lineColor: "#3b82f6";
        labelBgColor: "#172554";
        labelColor: "#60a5fa";
    };
    gray: {
        lineColor: "#6E6E6E";
        labelBgColor: "#18191b";
        labelColor: "#C6C6C6";
    };
    green: {
        lineColor: "#15803d";
        labelBgColor: "#052e16";
        labelColor: "#22c55e";
    };
    indigo: {
        lineColor: "#6366f1";
        labelBgColor: "#1e1b4b";
        labelColor: "#818cf8";
    };
    muted: {
        lineColor: "#64748b";
        labelBgColor: "#0f172a";
        labelColor: "#cbd5e1";
    };
    primary: {
        lineColor: "#3b82f6";
        labelBgColor: "#172554";
        labelColor: "#60a5fa";
    };
    red: {
        lineColor: "#AC4D39";
        labelBgColor: "#b91c1c";
        labelColor: "#f5b2a3";
    };
    secondary: {
        lineColor: "#0ea5e9";
        labelBgColor: "#082f49";
        labelColor: "#38bdf8";
    };
    sky: {
        lineColor: "#0ea5e9";
        labelBgColor: "#082f49";
        labelColor: "#38bdf8";
    };
    slate: {
        lineColor: "#64748b";
        labelBgColor: "#0f172a";
        labelColor: "#cbd5e1";
    };
};

declare const defaultTheme: LikeC4Theme;
declare function computeColorValues(color: HexColorLiteral): ThemeColorValues;

declare function nonNullable<T>(value: T, message?: string | (() => string)): NonNullable<T>;
declare function invariant(condition: any, message?: string): asserts condition;
declare function nonexhaustive(value: never): never;

export { ElementColors, HexColorLiteral, LikeC4Theme, RelationshipColors, ThemeColorValues, computeColorValues, defaultTheme, invariant, nonNullable, nonexhaustive };
