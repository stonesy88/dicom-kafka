{
  "version": 3,
  "sources": ["../../../../@likec4/core/dist/utils/index.mjs"],
  "sourcesContent": ["import { r as requireForeach, p as requireIterator, v as n } from '../shared/core.Cu-UdkSl.mjs';\nexport { S as Stack, c as commonHead, h as difference, j as equalsSet, g as getOrCreate, i as hasAtLeast, a as ifind, b as iflat, k as intersection, d as isIterable, e as isome, f as iunique, o as objectHash, n as stringHash, s as symmetricDifference, u as union } from '../shared/core.Cu-UdkSl.mjs';\nimport { j as getDefaultExportFromCjs, h as t, m as commonAncestor, q as compareFqnHierarchically } from '../shared/core.CQXU9DF7.mjs';\nexport { D as DefaultMap, l as ancestorsFqn, o as compareByFqnHierarchically, k as compareNatural, r as hierarchyDistance, u as hierarchyLevel, c as ifilter, d as imap, a as isAncestor, i as isDescendantOf, e as isNonEmptyArray, g as isSameHierarchy, x as isString, n as nameFromFqn, p as parentFqn, v as sortByFqnHierarchically, w as sortNaturalByFqn, s as sortParentsFirst, b as toArray, t as toSet } from '../shared/core.CQXU9DF7.mjs';\nimport { i as invariant } from '../shared/core.C-YXI-43.mjs';\n\nfunction o(r,n){let e=Math.ceil(r),t=Math.floor(n);if(t<e)throw new RangeError(`randomInteger: The range [${r.toString()},${n.toString()}] contains no integer`);return Math.floor(Math.random()*(t-e+1)+e)}\n\n/**\n * Mnemonist BiMap\n * ================\n *\n * JavaScript implementation of a BiMap.\n */\n\nvar biMap$1;\nvar hasRequiredBiMap;\n\nfunction requireBiMap () {\n\tif (hasRequiredBiMap) return biMap$1;\n\thasRequiredBiMap = 1;\n\tvar forEach = requireForeach();\n\n\t/**\n\t * Inverse Map.\n\t *\n\t * @constructor\n\t */\n\tfunction InverseMap(original) {\n\n\t  this.size = 0;\n\t  this.items = new Map();\n\t  this.inverse = original;\n\t}\n\n\t/**\n\t * BiMap.\n\t *\n\t * @constructor\n\t */\n\tfunction BiMap() {\n\n\t  this.size = 0;\n\t  this.items = new Map();\n\t  this.inverse = new InverseMap(this);\n\t}\n\n\t/**\n\t * Method used to clear the map.\n\t *\n\t * @return {undefined}\n\t */\n\tfunction clear() {\n\t  this.size = 0;\n\t  this.items.clear();\n\t  this.inverse.items.clear();\n\t}\n\n\tBiMap.prototype.clear = clear;\n\tInverseMap.prototype.clear = clear;\n\n\t/**\n\t * Method used to set a relation.\n\t *\n\t * @param  {any} key - Key.\n\t * @param  {any} value - Value.\n\t * @return {BiMap|InverseMap}\n\t */\n\tfunction set(key, value) {\n\n\t  // First we need to attempt to see if the relation is not flawed\n\t  if (this.items.has(key)) {\n\t    var currentValue = this.items.get(key);\n\n\t    // The relation already exists, we do nothing\n\t    if (currentValue === value)\n\t      return this;\n\t    else\n\t      this.inverse.items.delete(currentValue);\n\t  }\n\n\t  if (this.inverse.items.has(value)) {\n\t    var currentKey = this.inverse.items.get(value);\n\n\t    if (currentKey === key)\n\t      return this;\n\t    else\n\t      this.items.delete(currentKey);\n\t  }\n\n\t  // Here we actually add the relation\n\t  this.items.set(key, value);\n\t  this.inverse.items.set(value, key);\n\n\t  // Size\n\t  this.size = this.items.size;\n\t  this.inverse.size = this.inverse.items.size;\n\n\t  return this;\n\t}\n\n\tBiMap.prototype.set = set;\n\tInverseMap.prototype.set = set;\n\n\t/**\n\t * Method used to delete a relation.\n\t *\n\t * @param  {any} key - Key.\n\t * @return {boolean}\n\t */\n\tfunction del(key) {\n\t  if (this.items.has(key)) {\n\t    var currentValue = this.items.get(key);\n\n\t    this.items.delete(key);\n\t    this.inverse.items.delete(currentValue);\n\n\t    // Size\n\t    this.size = this.items.size;\n\t    this.inverse.size = this.inverse.items.size;\n\n\t    return true;\n\t  }\n\n\t  return false;\n\t}\n\n\tBiMap.prototype.delete = del;\n\tInverseMap.prototype.delete = del;\n\n\t/**\n\t * Mapping some Map prototype function unto our two classes.\n\t */\n\tvar METHODS = ['has', 'get', 'forEach', 'keys', 'values', 'entries'];\n\n\tMETHODS.forEach(function(name) {\n\t  BiMap.prototype[name] = InverseMap.prototype[name] = function() {\n\t    return Map.prototype[name].apply(this.items, arguments);\n\t  };\n\t});\n\n\t/**\n\t * Attaching the #.values method to Symbol.iterator if possible.\n\t */\n\tif (typeof Symbol !== 'undefined') {\n\t  BiMap.prototype[Symbol.iterator] = BiMap.prototype.entries;\n\t  InverseMap.prototype[Symbol.iterator] = InverseMap.prototype.entries;\n\t}\n\n\t/**\n\t * Convenience known methods.\n\t */\n\tBiMap.prototype.inspect = function() {\n\t  var dummy = {\n\t    left: this.items,\n\t    right: this.inverse.items\n\t  };\n\n\t  // Trick so that node displays the name of the constructor\n\t  Object.defineProperty(dummy, 'constructor', {\n\t    value: BiMap,\n\t    enumerable: false\n\t  });\n\n\t  return dummy;\n\t};\n\n\tif (typeof Symbol !== 'undefined')\n\t  BiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = BiMap.prototype.inspect;\n\n\tInverseMap.prototype.inspect = function() {\n\t  var dummy = {\n\t    left: this.inverse.items,\n\t    right: this.items\n\t  };\n\n\t  // Trick so that node displays the name of the constructor\n\t  Object.defineProperty(dummy, 'constructor', {\n\t    value: InverseMap,\n\t    enumerable: false\n\t  });\n\n\t  return dummy;\n\t};\n\n\tif (typeof Symbol !== 'undefined')\n\t  InverseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = InverseMap.prototype.inspect;\n\n\n\t/**\n\t * Static @.from function taking an arbitrary iterable & converting it into\n\t * a bimap.\n\t *\n\t * @param  {Iterable} iterable - Target iterable.\n\t * @return {BiMap}\n\t */\n\tBiMap.from = function(iterable) {\n\t  var bimap = new BiMap();\n\n\t  forEach(iterable, function(value, key) {\n\t    bimap.set(key, value);\n\t  });\n\n\t  return bimap;\n\t};\n\n\t/**\n\t * Exporting.\n\t */\n\tbiMap$1 = BiMap;\n\treturn biMap$1;\n}\n\nvar biMapExports = /*@__PURE__*/ requireBiMap();\nconst biMap = /*@__PURE__*/getDefaultExportFromCjs(biMapExports);\n\n/**\n * Mnemonist DefaultWeakMap\n * =========================\n *\n * JavaScript implementation of a default weak map that will return a constructed\n * value any time one tries to access an non-existing key. It is similar to\n * DefaultMap but uses ES6 WeakMap that only holds weak reference to keys.\n */\n\nvar defaultWeakMap$1;\nvar hasRequiredDefaultWeakMap;\n\nfunction requireDefaultWeakMap () {\n\tif (hasRequiredDefaultWeakMap) return defaultWeakMap$1;\n\thasRequiredDefaultWeakMap = 1;\n\t/**\n\t * DefaultWeakMap.\n\t *\n\t * @constructor\n\t */\n\tfunction DefaultWeakMap(factory) {\n\t  if (typeof factory !== 'function')\n\t    throw new Error('mnemonist/DefaultWeakMap.constructor: expecting a function.');\n\n\t  this.items = new WeakMap();\n\t  this.factory = factory;\n\t}\n\n\t/**\n\t * Method used to clear the structure.\n\t *\n\t * @return {undefined}\n\t */\n\tDefaultWeakMap.prototype.clear = function() {\n\n\t  // Properties\n\t  this.items = new WeakMap();\n\t};\n\n\t/**\n\t * Method used to get the value set for given key. If the key does not exist,\n\t * the value will be created using the provided factory.\n\t *\n\t * @param  {any} key - Target key.\n\t * @return {any}\n\t */\n\tDefaultWeakMap.prototype.get = function(key) {\n\t  var value = this.items.get(key);\n\n\t  if (typeof value === 'undefined') {\n\t    value = this.factory(key);\n\t    this.items.set(key, value);\n\t  }\n\n\t  return value;\n\t};\n\n\t/**\n\t * Method used to get the value set for given key. If the key does not exist,\n\t * a value won't be created.\n\t *\n\t * @param  {any} key - Target key.\n\t * @return {any}\n\t */\n\tDefaultWeakMap.prototype.peek = function(key) {\n\t  return this.items.get(key);\n\t};\n\n\t/**\n\t * Method used to set a value for given key.\n\t *\n\t * @param  {any} key   - Target key.\n\t * @param  {any} value - Value.\n\t * @return {DefaultMap}\n\t */\n\tDefaultWeakMap.prototype.set = function(key, value) {\n\t  this.items.set(key, value);\n\t  return this;\n\t};\n\n\t/**\n\t * Method used to test the existence of a key in the map.\n\t *\n\t * @param  {any} key   - Target key.\n\t * @return {boolean}\n\t */\n\tDefaultWeakMap.prototype.has = function(key) {\n\t  return this.items.has(key);\n\t};\n\n\t/**\n\t * Method used to delete target key.\n\t *\n\t * @param  {any} key   - Target key.\n\t * @return {boolean}\n\t */\n\tDefaultWeakMap.prototype.delete = function(key) {\n\t  return this.items.delete(key);\n\t};\n\n\t/**\n\t * Convenience known methods.\n\t */\n\tDefaultWeakMap.prototype.inspect = function() {\n\t  return this.items;\n\t};\n\n\tif (typeof Symbol !== 'undefined')\n\t  DefaultWeakMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultWeakMap.prototype.inspect;\n\n\t/**\n\t * Exporting.\n\t */\n\tdefaultWeakMap$1 = DefaultWeakMap;\n\treturn defaultWeakMap$1;\n}\n\nvar defaultWeakMapExports = /*@__PURE__*/ requireDefaultWeakMap();\nconst defaultWeakMap = /*@__PURE__*/getDefaultExportFromCjs(defaultWeakMapExports);\n\n/**\n * Mnemonist Linked List\n * ======================\n *\n * Singly linked list implementation. Uses raw JavaScript objects as nodes\n * as benchmarks proved it was the fastest thing to do.\n */\n\nvar linkedList$1;\nvar hasRequiredLinkedList;\n\nfunction requireLinkedList () {\n\tif (hasRequiredLinkedList) return linkedList$1;\n\thasRequiredLinkedList = 1;\n\tvar Iterator = requireIterator(),\n\t    forEach = requireForeach();\n\n\t/**\n\t * Linked List.\n\t *\n\t * @constructor\n\t */\n\tfunction LinkedList() {\n\t  this.clear();\n\t}\n\n\t/**\n\t * Method used to clear the list.\n\t *\n\t * @return {undefined}\n\t */\n\tLinkedList.prototype.clear = function() {\n\n\t  // Properties\n\t  this.head = null;\n\t  this.tail = null;\n\t  this.size = 0;\n\t};\n\n\t/**\n\t * Method used to get the first item of the list.\n\t *\n\t * @return {any}\n\t */\n\tLinkedList.prototype.first = function() {\n\t  return this.head ? this.head.item : undefined;\n\t};\n\tLinkedList.prototype.peek = LinkedList.prototype.first;\n\n\t/**\n\t * Method used to get the last item of the list.\n\t *\n\t * @return {any}\n\t */\n\tLinkedList.prototype.last = function() {\n\t  return this.tail ? this.tail.item : undefined;\n\t};\n\n\t/**\n\t * Method used to add an item at the end of the list.\n\t *\n\t * @param  {any}    item - The item to add.\n\t * @return {number}\n\t */\n\tLinkedList.prototype.push = function(item) {\n\t  var node = {item: item, next: null};\n\n\t  if (!this.head) {\n\t    this.head = node;\n\t    this.tail = node;\n\t  }\n\t  else {\n\t    this.tail.next = node;\n\t    this.tail = node;\n\t  }\n\n\t  this.size++;\n\n\t  return this.size;\n\t};\n\n\t/**\n\t * Method used to add an item at the beginning of the list.\n\t *\n\t * @param  {any}    item - The item to add.\n\t * @return {number}\n\t */\n\tLinkedList.prototype.unshift = function(item) {\n\t  var node = {item: item, next: null};\n\n\t  if (!this.head) {\n\t    this.head = node;\n\t    this.tail = node;\n\t  }\n\t  else {\n\t    if (!this.head.next)\n\t      this.tail = this.head;\n\t    node.next = this.head;\n\t    this.head = node;\n\t  }\n\n\t  this.size++;\n\n\t  return this.size;\n\t};\n\n\t/**\n\t * Method used to retrieve & remove the first item of the list.\n\t *\n\t * @return {any}\n\t */\n\tLinkedList.prototype.shift = function() {\n\t  if (!this.size)\n\t    return undefined;\n\n\t  var node = this.head;\n\n\t  this.head = node.next;\n\t  this.size--;\n\n\t  return node.item;\n\t};\n\n\t/**\n\t * Method used to iterate over the list.\n\t *\n\t * @param  {function}  callback - Function to call for each item.\n\t * @param  {object}    scope    - Optional scope.\n\t * @return {undefined}\n\t */\n\tLinkedList.prototype.forEach = function(callback, scope) {\n\t  if (!this.size)\n\t    return;\n\n\t  scope = arguments.length > 1 ? scope : this;\n\n\t  var n = this.head,\n\t      i = 0;\n\n\t  while (n) {\n\t    callback.call(scope, n.item, i, this);\n\t    n = n.next;\n\t    i++;\n\t  }\n\t};\n\n\t/**\n\t * Method used to convert the list into an array.\n\t *\n\t * @return {array}\n\t */\n\tLinkedList.prototype.toArray = function() {\n\t  if (!this.size)\n\t    return [];\n\n\t  var array = new Array(this.size);\n\n\t  for (var i = 0, l = this.size, n = this.head; i < l; i++) {\n\t    array[i] = n.item;\n\t    n = n.next;\n\t  }\n\n\t  return array;\n\t};\n\n\t/**\n\t * Method used to create an iterator over a list's values.\n\t *\n\t * @return {Iterator}\n\t */\n\tLinkedList.prototype.values = function() {\n\t  var n = this.head;\n\n\t  return new Iterator(function() {\n\t    if (!n)\n\t      return {\n\t        done: true\n\t      };\n\n\t    var value = n.item;\n\t    n = n.next;\n\n\t    return {\n\t      value: value,\n\t      done: false\n\t    };\n\t  });\n\t};\n\n\t/**\n\t * Method used to create an iterator over a list's entries.\n\t *\n\t * @return {Iterator}\n\t */\n\tLinkedList.prototype.entries = function() {\n\t  var n = this.head,\n\t      i = 0;\n\n\t  return new Iterator(function() {\n\t    if (!n)\n\t      return {\n\t        done: true\n\t      };\n\n\t    var value = n.item;\n\t    n = n.next;\n\t    i++;\n\n\t    return {\n\t      value: [i - 1, value],\n\t      done: false\n\t    };\n\t  });\n\t};\n\n\t/**\n\t * Attaching the #.values method to Symbol.iterator if possible.\n\t */\n\tif (typeof Symbol !== 'undefined')\n\t  LinkedList.prototype[Symbol.iterator] = LinkedList.prototype.values;\n\n\t/**\n\t * Convenience known methods.\n\t */\n\tLinkedList.prototype.toString = function() {\n\t  return this.toArray().join(',');\n\t};\n\n\tLinkedList.prototype.toJSON = function() {\n\t  return this.toArray();\n\t};\n\n\tLinkedList.prototype.inspect = function() {\n\t  var array = this.toArray();\n\n\t  // Trick so that node displays the name of the constructor\n\t  Object.defineProperty(array, 'constructor', {\n\t    value: LinkedList,\n\t    enumerable: false\n\t  });\n\n\t  return array;\n\t};\n\n\tif (typeof Symbol !== 'undefined')\n\t  LinkedList.prototype[Symbol.for('nodejs.util.inspect.custom')] = LinkedList.prototype.inspect;\n\n\t/**\n\t * Static @.from function taking an arbitrary iterable & converting it into\n\t * a list.\n\t *\n\t * @param  {Iterable} iterable   - Target iterable.\n\t * @return {LinkedList}\n\t */\n\tLinkedList.from = function(iterable) {\n\t  var list = new LinkedList();\n\n\t  forEach(iterable, function(value) {\n\t    list.push(value);\n\t  });\n\n\t  return list;\n\t};\n\n\t/**\n\t * Exporting.\n\t */\n\tlinkedList$1 = LinkedList;\n\treturn linkedList$1;\n}\n\nvar linkedListExports = /*@__PURE__*/ requireLinkedList();\nconst linkedList = /*@__PURE__*/getDefaultExportFromCjs(linkedListExports);\n\n/**\n * Mnemonist MultiMap\n * ===================\n *\n * Implementation of a MultiMap with custom container.\n */\n\nvar multiMap$1;\nvar hasRequiredMultiMap;\n\nfunction requireMultiMap () {\n\tif (hasRequiredMultiMap) return multiMap$1;\n\thasRequiredMultiMap = 1;\n\tvar Iterator = requireIterator(),\n\t    forEach = requireForeach();\n\n\t/**\n\t * MultiMap.\n\t *\n\t * @constructor\n\t */\n\tfunction MultiMap(Container) {\n\n\t  this.Container = Container || Array;\n\t  this.items = new Map();\n\t  this.clear();\n\n\t  Object.defineProperty(this.items, 'constructor', {\n\t    value: MultiMap,\n\t    enumerable: false\n\t  });\n\t}\n\n\t/**\n\t * Method used to clear the structure.\n\t *\n\t * @return {undefined}\n\t */\n\tMultiMap.prototype.clear = function() {\n\n\t  // Properties\n\t  this.size = 0;\n\t  this.dimension = 0;\n\t  this.items.clear();\n\t};\n\n\t/**\n\t * Method used to set a value.\n\t *\n\t * @param  {any}      key   - Key.\n\t * @param  {any}      value - Value to add.\n\t * @return {MultiMap}\n\t */\n\tMultiMap.prototype.set = function(key, value) {\n\t  var container = this.items.get(key),\n\t      sizeBefore;\n\n\t  if (!container) {\n\t    this.dimension++;\n\t    container = new this.Container();\n\t    this.items.set(key, container);\n\t  }\n\n\t  if (this.Container === Set) {\n\t    sizeBefore = container.size;\n\t    container.add(value);\n\n\t    if (sizeBefore < container.size)\n\t      this.size++;\n\t  }\n\t  else {\n\t    container.push(value);\n\t    this.size++;\n\t  }\n\n\t  return this;\n\t};\n\n\t/**\n\t * Method used to delete the given key.\n\t *\n\t * @param  {any}     key - Key to delete.\n\t * @return {boolean}\n\t */\n\tMultiMap.prototype.delete = function(key) {\n\t  var container = this.items.get(key);\n\n\t  if (!container)\n\t    return false;\n\n\t  this.size -= (this.Container === Set ? container.size : container.length);\n\t  this.dimension--;\n\t  this.items.delete(key);\n\n\t  return true;\n\t};\n\n\t/**\n\t * Method used to delete the remove an item in the container stored at the\n\t * given key.\n\t *\n\t * @param  {any}     key - Key to delete.\n\t * @return {boolean}\n\t */\n\tMultiMap.prototype.remove = function(key, value) {\n\t  var container = this.items.get(key),\n\t      wasDeleted,\n\t      index;\n\n\t  if (!container)\n\t    return false;\n\n\t  if (this.Container === Set) {\n\t    wasDeleted = container.delete(value);\n\n\t    if (wasDeleted)\n\t      this.size--;\n\n\t    if (container.size === 0) {\n\t      this.items.delete(key);\n\t      this.dimension--;\n\t    }\n\n\t    return wasDeleted;\n\t  }\n\t  else {\n\t    index = container.indexOf(value);\n\n\t    if (index === -1)\n\t      return false;\n\n\t    this.size--;\n\n\t    if (container.length === 1) {\n\t      this.items.delete(key);\n\t      this.dimension--;\n\n\t      return true;\n\t    }\n\n\t    container.splice(index, 1);\n\n\t    return true;\n\t  }\n\t};\n\n\t/**\n\t * Method used to return whether the given keys exists in the map.\n\t *\n\t * @param  {any}     key - Key to check.\n\t * @return {boolean}\n\t */\n\tMultiMap.prototype.has = function(key) {\n\t  return this.items.has(key);\n\t};\n\n\t/**\n\t * Method used to return the container stored at the given key or `undefined`.\n\t *\n\t * @param  {any}     key - Key to get.\n\t * @return {boolean}\n\t */\n\tMultiMap.prototype.get = function(key) {\n\t  return this.items.get(key);\n\t};\n\n\t/**\n\t * Method used to return the multiplicity of the given key, meaning the number\n\t * of times it is set, or, more trivially, the size of the attached container.\n\t *\n\t * @param  {any}     key - Key to check.\n\t * @return {number}\n\t */\n\tMultiMap.prototype.multiplicity = function(key) {\n\t  var container = this.items.get(key);\n\n\t  if (typeof container === 'undefined')\n\t    return 0;\n\n\t  return this.Container === Set ? container.size : container.length;\n\t};\n\tMultiMap.prototype.count = MultiMap.prototype.multiplicity;\n\n\t/**\n\t * Method used to iterate over each of the key/value pairs.\n\t *\n\t * @param  {function}  callback - Function to call for each item.\n\t * @param  {object}    scope    - Optional scope.\n\t * @return {undefined}\n\t */\n\tMultiMap.prototype.forEach = function(callback, scope) {\n\t  scope = arguments.length > 1 ? scope : this;\n\n\t  // Inner iteration function is created here to avoid creating it in the loop\n\t  var key;\n\t  function inner(value) {\n\t    callback.call(scope, value, key);\n\t  }\n\n\t  this.items.forEach(function(container, k) {\n\t    key = k;\n\t    container.forEach(inner);\n\t  });\n\t};\n\n\t/**\n\t * Method used to iterate over each of the associations.\n\t *\n\t * @param  {function}  callback - Function to call for each item.\n\t * @param  {object}    scope    - Optional scope.\n\t * @return {undefined}\n\t */\n\tMultiMap.prototype.forEachAssociation = function(callback, scope) {\n\t  scope = arguments.length > 1 ? scope : this;\n\n\t  this.items.forEach(callback, scope);\n\t};\n\n\t/**\n\t * Method returning an iterator over the map's keys.\n\t *\n\t * @return {Iterator}\n\t */\n\tMultiMap.prototype.keys = function() {\n\t  return this.items.keys();\n\t};\n\n\t/**\n\t * Method returning an iterator over the map's keys.\n\t *\n\t * @return {Iterator}\n\t */\n\tMultiMap.prototype.values = function() {\n\t  var iterator = this.items.values(),\n\t      inContainer = false,\n\t      countainer,\n\t      step,\n\t      i,\n\t      l;\n\n\t  if (this.Container === Set)\n\t    return new Iterator(function next() {\n\t      if (!inContainer) {\n\t        step = iterator.next();\n\n\t        if (step.done)\n\t          return {done: true};\n\n\t        inContainer = true;\n\t        countainer = step.value.values();\n\t      }\n\n\t      step = countainer.next();\n\n\t      if (step.done) {\n\t        inContainer = false;\n\t        return next();\n\t      }\n\n\t      return {\n\t        done: false,\n\t        value: step.value\n\t      };\n\t    });\n\n\t  return new Iterator(function next() {\n\t    if (!inContainer) {\n\t      step = iterator.next();\n\n\t      if (step.done)\n\t        return {done: true};\n\n\t      inContainer = true;\n\t      countainer = step.value;\n\t      i = 0;\n\t      l = countainer.length;\n\t    }\n\n\t    if (i >= l) {\n\t      inContainer = false;\n\t      return next();\n\t    }\n\n\t    return {\n\t      done: false,\n\t      value: countainer[i++]\n\t    };\n\t  });\n\t};\n\n\t/**\n\t * Method returning an iterator over the map's entries.\n\t *\n\t * @return {Iterator}\n\t */\n\tMultiMap.prototype.entries = function() {\n\t  var iterator = this.items.entries(),\n\t      inContainer = false,\n\t      countainer,\n\t      step,\n\t      key,\n\t      i,\n\t      l;\n\n\t  if (this.Container === Set)\n\t    return new Iterator(function next() {\n\t      if (!inContainer) {\n\t        step = iterator.next();\n\n\t        if (step.done)\n\t          return {done: true};\n\n\t        inContainer = true;\n\t        key = step.value[0];\n\t        countainer = step.value[1].values();\n\t      }\n\n\t      step = countainer.next();\n\n\t      if (step.done) {\n\t        inContainer = false;\n\t        return next();\n\t      }\n\n\t      return {\n\t        done: false,\n\t        value: [key, step.value]\n\t      };\n\t    });\n\n\t  return new Iterator(function next() {\n\t    if (!inContainer) {\n\t      step = iterator.next();\n\n\t      if (step.done)\n\t        return {done: true};\n\n\t      inContainer = true;\n\t      key = step.value[0];\n\t      countainer = step.value[1];\n\t      i = 0;\n\t      l = countainer.length;\n\t    }\n\n\t    if (i >= l) {\n\t      inContainer = false;\n\t      return next();\n\t    }\n\n\t    return {\n\t      done: false,\n\t      value: [key, countainer[i++]]\n\t    };\n\t  });\n\t};\n\n\t/**\n\t * Method returning an iterator over the map's containers.\n\t *\n\t * @return {Iterator}\n\t */\n\tMultiMap.prototype.containers = function() {\n\t  return this.items.values();\n\t};\n\n\t/**\n\t * Method returning an iterator over the map's associations.\n\t *\n\t * @return {Iterator}\n\t */\n\tMultiMap.prototype.associations = function() {\n\t  return this.items.entries();\n\t};\n\n\t/**\n\t * Attaching the #.entries method to Symbol.iterator if possible.\n\t */\n\tif (typeof Symbol !== 'undefined')\n\t  MultiMap.prototype[Symbol.iterator] = MultiMap.prototype.entries;\n\n\t/**\n\t * Convenience known methods.\n\t */\n\tMultiMap.prototype.inspect = function() {\n\t  return this.items;\n\t};\n\n\tif (typeof Symbol !== 'undefined')\n\t  MultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = MultiMap.prototype.inspect;\n\tMultiMap.prototype.toJSON = function() {\n\t  return this.items;\n\t};\n\n\t/**\n\t * Static @.from function taking an arbitrary iterable & converting it into\n\t * a structure.\n\t *\n\t * @param  {Iterable} iterable  - Target iterable.\n\t * @param  {Class}    Container - Container.\n\t * @return {MultiMap}\n\t */\n\tMultiMap.from = function(iterable, Container) {\n\t  var map = new MultiMap(Container);\n\n\t  forEach(iterable, function(value, key) {\n\t    map.set(key, value);\n\t  });\n\n\t  return map;\n\t};\n\n\t/**\n\t * Exporting.\n\t */\n\tmultiMap$1 = MultiMap;\n\treturn multiMap$1;\n}\n\nvar multiMapExports = /*@__PURE__*/ requireMultiMap();\nconst multiMap = /*@__PURE__*/getDefaultExportFromCjs(multiMapExports);\n\n/**\n * Mnemonist Queue\n * ================\n *\n * Queue implementation based on the ideas of Queue.js that seems to beat\n * a LinkedList one in performance.\n */\n\nvar queue$1;\nvar hasRequiredQueue;\n\nfunction requireQueue () {\n\tif (hasRequiredQueue) return queue$1;\n\thasRequiredQueue = 1;\n\tvar Iterator = requireIterator(),\n\t    forEach = requireForeach();\n\n\t/**\n\t * Queue\n\t *\n\t * @constructor\n\t */\n\tfunction Queue() {\n\t  this.clear();\n\t}\n\n\t/**\n\t * Method used to clear the queue.\n\t *\n\t * @return {undefined}\n\t */\n\tQueue.prototype.clear = function() {\n\n\t  // Properties\n\t  this.items = [];\n\t  this.offset = 0;\n\t  this.size = 0;\n\t};\n\n\t/**\n\t * Method used to add an item to the queue.\n\t *\n\t * @param  {any}    item - Item to enqueue.\n\t * @return {number}\n\t */\n\tQueue.prototype.enqueue = function(item) {\n\n\t  this.items.push(item);\n\t  return ++this.size;\n\t};\n\n\t/**\n\t * Method used to retrieve & remove the first item of the queue.\n\t *\n\t * @return {any}\n\t */\n\tQueue.prototype.dequeue = function() {\n\t  if (!this.size)\n\t    return;\n\n\t  var item = this.items[this.offset];\n\n\t  if (++this.offset * 2 >= this.items.length) {\n\t    this.items = this.items.slice(this.offset);\n\t    this.offset = 0;\n\t  }\n\n\t  this.size--;\n\n\t  return item;\n\t};\n\n\t/**\n\t * Method used to retrieve the first item of the queue.\n\t *\n\t * @return {any}\n\t */\n\tQueue.prototype.peek = function() {\n\t  if (!this.size)\n\t    return;\n\n\t  return this.items[this.offset];\n\t};\n\n\t/**\n\t * Method used to iterate over the queue.\n\t *\n\t * @param  {function}  callback - Function to call for each item.\n\t * @param  {object}    scope    - Optional scope.\n\t * @return {undefined}\n\t */\n\tQueue.prototype.forEach = function(callback, scope) {\n\t  scope = arguments.length > 1 ? scope : this;\n\n\t  for (var i = this.offset, j = 0, l = this.items.length; i < l; i++, j++)\n\t    callback.call(scope, this.items[i], j, this);\n\t};\n\n\t/*\n\t * Method used to convert the queue to a JavaScript array.\n\t *\n\t * @return {array}\n\t */\n\tQueue.prototype.toArray = function() {\n\t  return this.items.slice(this.offset);\n\t};\n\n\t/**\n\t * Method used to create an iterator over a queue's values.\n\t *\n\t * @return {Iterator}\n\t */\n\tQueue.prototype.values = function() {\n\t  var items = this.items,\n\t      i = this.offset;\n\n\t  return new Iterator(function() {\n\t    if (i >= items.length)\n\t      return {\n\t        done: true\n\t      };\n\n\t    var value = items[i];\n\t    i++;\n\n\t    return {\n\t      value: value,\n\t      done: false\n\t    };\n\t  });\n\t};\n\n\t/**\n\t * Method used to create an iterator over a queue's entries.\n\t *\n\t * @return {Iterator}\n\t */\n\tQueue.prototype.entries = function() {\n\t  var items = this.items,\n\t      i = this.offset,\n\t      j = 0;\n\n\t  return new Iterator(function() {\n\t    if (i >= items.length)\n\t      return {\n\t        done: true\n\t      };\n\n\t    var value = items[i];\n\t    i++;\n\n\t    return {\n\t      value: [j++, value],\n\t      done: false\n\t    };\n\t  });\n\t};\n\n\t/**\n\t * Attaching the #.values method to Symbol.iterator if possible.\n\t */\n\tif (typeof Symbol !== 'undefined')\n\t  Queue.prototype[Symbol.iterator] = Queue.prototype.values;\n\n\t/**\n\t * Convenience known methods.\n\t */\n\tQueue.prototype.toString = function() {\n\t  return this.toArray().join(',');\n\t};\n\n\tQueue.prototype.toJSON = function() {\n\t  return this.toArray();\n\t};\n\n\tQueue.prototype.inspect = function() {\n\t  var array = this.toArray();\n\n\t  // Trick so that node displays the name of the constructor\n\t  Object.defineProperty(array, 'constructor', {\n\t    value: Queue,\n\t    enumerable: false\n\t  });\n\n\t  return array;\n\t};\n\n\tif (typeof Symbol !== 'undefined')\n\t  Queue.prototype[Symbol.for('nodejs.util.inspect.custom')] = Queue.prototype.inspect;\n\n\t/**\n\t * Static @.from function taking an arbitrary iterable & converting it into\n\t * a queue.\n\t *\n\t * @param  {Iterable} iterable   - Target iterable.\n\t * @return {Queue}\n\t */\n\tQueue.from = function(iterable) {\n\t  var queue = new Queue();\n\n\t  forEach(iterable, function(value) {\n\t    queue.enqueue(value);\n\t  });\n\n\t  return queue;\n\t};\n\n\t/**\n\t * Static @.of function taking an arbitrary number of arguments & converting it\n\t * into a queue.\n\t *\n\t * @param  {...any} args\n\t * @return {Queue}\n\t */\n\tQueue.of = function() {\n\t  return Queue.from(arguments);\n\t};\n\n\t/**\n\t * Exporting.\n\t */\n\tqueue$1 = Queue;\n\treturn queue$1;\n}\n\nvar queueExports = /*@__PURE__*/ requireQueue();\nconst queue = /*@__PURE__*/getDefaultExportFromCjs(queueExports);\n\nfunction ireduce(arg1, arg2, arg3) {\n  const reducer = n(arg3) ? arg2 : arg1;\n  const initialValue = arg3 ?? arg2;\n  invariant(t(reducer));\n  function _reduce(iter) {\n    let acc = initialValue;\n    for (const value of iter) {\n      acc = reducer(acc, value);\n    }\n    return acc;\n  }\n  return n(arg3) ? _reduce(arg1) : _reduce;\n}\n\nconst DELAY = \"LIKEC4_DELAY\";\nfunction delay(...args) {\n  let ms = 100;\n  if (args.length === 2) {\n    ms = o(args[0], args[1]);\n  } else if (args.length === 1) {\n    ms = args[0];\n  }\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(DELAY);\n    }, ms ?? 100);\n  });\n}\n\nconst compareRelations = (a, b) => {\n  const parentA = commonAncestor(a.source, a.target);\n  const parentB = commonAncestor(b.source, b.target);\n  if (parentA && !parentB) {\n    return 1;\n  }\n  if (!parentA && parentB) {\n    return -1;\n  }\n  const compareParents = parentA && parentB ? compareFqnHierarchically(parentA, parentB) : 0;\n  if (compareParents !== 0) {\n    return compareParents;\n  }\n  const compareSource = compareFqnHierarchically(a.source, b.source);\n  if (compareSource !== 0) {\n    return compareSource;\n  }\n  return compareFqnHierarchically(a.target, b.target);\n};\n\nexport { biMap as BiMap, defaultWeakMap as DefaultWeakMap, linkedList as LinkedList, multiMap as MultiMap, queue as Queue, commonAncestor, compareFqnHierarchically, compareRelations, delay, ireduce };\n"],
  "mappings": "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",
  "names": ["n", "t", "queue"]
}
