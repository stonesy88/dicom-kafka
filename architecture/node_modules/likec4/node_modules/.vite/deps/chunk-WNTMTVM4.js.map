{
  "version": 3,
  "sources": ["../../../../@likec4/core/dist/compute-view/relationships-view/index.mjs"],
  "sourcesContent": ["import { s as sortParentsFirst, D as DefaultMap, i as isDescendantOf, a as isAncestor, t as toSet, b as toArray, c as ifilter, C, d as imap } from '../../shared/core.CQXU9DF7.mjs';\nimport { n as nonNullable, i as invariant } from '../../shared/core.C-YXI-43.mjs';\n\nfunction treeFromElements(elements) {\n  const sorted = sortParentsFirst([...elements]);\n  const root = new Set(sorted);\n  const map = new Map(sorted.map((e) => [e._literalId, e]));\n  const parents = new DefaultMap(() => null);\n  const children = sorted.reduce((acc, parent, index, all) => {\n    acc.set(\n      parent,\n      all.slice(index + 1).filter(isDescendantOf(parent)).map((e) => {\n        root.delete(e);\n        return e;\n      }).reduce((acc2, el) => {\n        if (!acc2.some(isAncestor(el))) {\n          acc2.push(el);\n          parents.set(el, parent);\n        }\n        return acc2;\n      }, [])\n    );\n    return acc;\n  }, new DefaultMap(() => []));\n  return {\n    sorted,\n    byId: (id) => nonNullable(map.get(id), `Element not found by id: ${id}`),\n    root,\n    parent: (el) => parents.get(el),\n    children: (el) => children.get(el),\n    /**\n     * Flattens the tree structure by removing redundant hierarchy levels.\n     * @example\n     *   A\n     *   └── B\n     *       ├── C\n     *       │   └── D\n     *       │       └── E\n     *       └── F\n     *           └── G\n     * becomes\n     *   A\n     *   ├── C\n     *   │   └── E\n     *   └── F\n     *       └── G\n     */\n    flatten: () => {\n      return /* @__PURE__ */ new Set([\n        ...root,\n        ...sorted.reduce((acc, el) => {\n          const _children = children.get(el);\n          if (_children.length === 0) {\n            acc.push(el);\n            return acc;\n          }\n          if (_children.length > 1) {\n            acc.push(..._children);\n          }\n          return acc;\n        }, [])\n      ]);\n    }\n  };\n}\n\nconst finalize = (elements, explicits) => {\n  if (elements.size > 2 && explicits.size !== elements.size) {\n    return new Set(sortParentsFirst([\n      ...treeFromElements(elements).flatten(),\n      ...explicits\n    ]));\n  }\n  if (elements.size > 1) {\n    return new Set(sortParentsFirst([...elements]));\n  }\n  return elements;\n};\nfunction computeRelationships(subject, others, relationships) {\n  const isOther = (e) => others.has(e);\n  let subjects = /* @__PURE__ */ new Set([subject]);\n  const explicits = {\n    incomers: /* @__PURE__ */ new Set(),\n    subjects: /* @__PURE__ */ new Set([subject]),\n    outgoers: /* @__PURE__ */ new Set()\n  };\n  let incomers = new Set(relationships.incoming.flatMap((r) => {\n    explicits.subjects.add(r.target);\n    explicits.incomers.add(r.source);\n    subjects.add(r.target);\n    if (r.target !== subject) {\n      let target = r.target.parent;\n      while (target && target !== subject) {\n        subjects.add(target);\n        target = target.parent;\n      }\n    }\n    let source = r.source;\n    const incomerBranch = [];\n    while (true) {\n      incomerBranch.push(source);\n      if (isOther(source) || !source.parent) {\n        break;\n      }\n      source = source.parent;\n    }\n    return incomerBranch;\n  }));\n  let outgoers = new Set(relationships.outgoing.flatMap((r) => {\n    explicits.subjects.add(r.source);\n    explicits.outgoers.add(r.target);\n    subjects.add(r.source);\n    if (r.source !== subject) {\n      let source = r.source.parent;\n      while (source && source !== subject) {\n        subjects.add(source);\n        source = source.parent;\n      }\n    }\n    let target = r.target;\n    const outgoerBranch = [];\n    while (true) {\n      outgoerBranch.push(target);\n      if (isOther(target) || !target.parent) {\n        break;\n      }\n      target = target.parent;\n    }\n    return outgoerBranch;\n  }));\n  return {\n    incomers: finalize(incomers, explicits.incomers),\n    incoming: new Set(relationships.incoming),\n    subjects: finalize(subjects, explicits.subjects),\n    outgoing: new Set(relationships.outgoing),\n    outgoers: finalize(outgoers, explicits.outgoers)\n  };\n}\nfunction computeRelationshipsView(subjectId, likec4model, scopeViewId, scope = \"global\") {\n  const view = scopeViewId ? likec4model.findView(scopeViewId) : null;\n  if (scope === \"view\") {\n    invariant(\n      view,\n      'Scope view id is required when scope is \"view\"'\n    );\n    return computeScopedRelationshipsView(subjectId, view, likec4model);\n  }\n  const subject = likec4model.element(subjectId);\n  const subjectSiblings = toSet(subject.ascendingSiblings());\n  return computeRelationships(\n    subject,\n    subjectSiblings,\n    {\n      incoming: [...subject.incoming()],\n      outgoing: [...subject.outgoing()]\n    }\n  );\n}\nfunction computeScopedRelationshipsView(subjectId, view, likec4model) {\n  const subject = likec4model.element(subjectId);\n  let relationships = {\n    incoming: toArray(ifilter(subject.incoming(), (r) => view.includesRelation(r.id))),\n    outgoing: toArray(ifilter(subject.outgoing(), (r) => view.includesRelation(r.id)))\n  };\n  const isDescendant = isDescendantOf(subject);\n  const others = /* @__PURE__ */ new Set([\n    ...subject.ascendingSiblings(),\n    ...C(\n      view.elements(),\n      imap((e) => e.element),\n      ifilter((e) => e !== subject && isDescendant(e))\n    )\n  ]);\n  return computeRelationships(\n    subject,\n    others,\n    relationships\n  );\n}\n\nexport { computeRelationshipsView, treeFromElements };\n"],
  "mappings": ";;;;;;;;;;;;;;;AAGA,SAAS,iBAAiB,UAAU;AAClC,QAAM,SAAS,iBAAiB,CAAC,GAAG,QAAQ,CAAC;AAC7C,QAAM,OAAO,IAAI,IAAI,MAAM;AAC3B,QAAM,MAAM,IAAI,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;AACxD,QAAM,UAAU,IAAI,WAAW,MAAM,IAAI;AACzC,QAAM,WAAW,OAAO,OAAO,CAAC,KAAK,QAAQ,OAAO,QAAQ;AAC1D,QAAI;AAAA,MACF;AAAA,MACA,IAAI,MAAM,QAAQ,CAAC,EAAE,OAAO,eAAe,MAAM,CAAC,EAAE,IAAI,CAAC,MAAM;AAC7D,aAAK,OAAO,CAAC;AACb,eAAO;AAAA,MACT,CAAC,EAAE,OAAO,CAAC,MAAM,OAAO;AACtB,YAAI,CAAC,KAAK,KAAK,WAAW,EAAE,CAAC,GAAG;AAC9B,eAAK,KAAK,EAAE;AACZ,kBAAQ,IAAI,IAAI,MAAM;AAAA,QACxB;AACA,eAAO;AAAA,MACT,GAAG,CAAC,CAAC;AAAA,IACP;AACA,WAAO;AAAA,EACT,GAAG,IAAI,WAAW,MAAM,CAAC,CAAC,CAAC;AAC3B,SAAO;AAAA,IACL;AAAA,IACA,MAAM,CAAC,OAAO,YAAY,IAAI,IAAI,EAAE,GAAG,4BAA4B,EAAE,EAAE;AAAA,IACvE;AAAA,IACA,QAAQ,CAAC,OAAO,QAAQ,IAAI,EAAE;AAAA,IAC9B,UAAU,CAAC,OAAO,SAAS,IAAI,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBjC,SAAS,MAAM;AACb,aAAuB,oBAAI,IAAI;AAAA,QAC7B,GAAG;AAAA,QACH,GAAG,OAAO,OAAO,CAAC,KAAK,OAAO;AAC5B,gBAAM,YAAY,SAAS,IAAI,EAAE;AACjC,cAAI,UAAU,WAAW,GAAG;AAC1B,gBAAI,KAAK,EAAE;AACX,mBAAO;AAAA,UACT;AACA,cAAI,UAAU,SAAS,GAAG;AACxB,gBAAI,KAAK,GAAG,SAAS;AAAA,UACvB;AACA,iBAAO;AAAA,QACT,GAAG,CAAC,CAAC;AAAA,MACP,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEA,IAAM,WAAW,CAAC,UAAU,cAAc;AACxC,MAAI,SAAS,OAAO,KAAK,UAAU,SAAS,SAAS,MAAM;AACzD,WAAO,IAAI,IAAI,iBAAiB;AAAA,MAC9B,GAAG,iBAAiB,QAAQ,EAAE,QAAQ;AAAA,MACtC,GAAG;AAAA,IACL,CAAC,CAAC;AAAA,EACJ;AACA,MAAI,SAAS,OAAO,GAAG;AACrB,WAAO,IAAI,IAAI,iBAAiB,CAAC,GAAG,QAAQ,CAAC,CAAC;AAAA,EAChD;AACA,SAAO;AACT;AACA,SAAS,qBAAqB,SAAS,QAAQ,eAAe;AAC5D,QAAM,UAAU,CAAC,MAAM,OAAO,IAAI,CAAC;AACnC,MAAI,WAA2B,oBAAI,IAAI,CAAC,OAAO,CAAC;AAChD,QAAM,YAAY;AAAA,IAChB,UAA0B,oBAAI,IAAI;AAAA,IAClC,UAA0B,oBAAI,IAAI,CAAC,OAAO,CAAC;AAAA,IAC3C,UAA0B,oBAAI,IAAI;AAAA,EACpC;AACA,MAAI,WAAW,IAAI,IAAI,cAAc,SAAS,QAAQ,CAAC,MAAM;AAC3D,cAAU,SAAS,IAAI,EAAE,MAAM;AAC/B,cAAU,SAAS,IAAI,EAAE,MAAM;AAC/B,aAAS,IAAI,EAAE,MAAM;AACrB,QAAI,EAAE,WAAW,SAAS;AACxB,UAAI,SAAS,EAAE,OAAO;AACtB,aAAO,UAAU,WAAW,SAAS;AACnC,iBAAS,IAAI,MAAM;AACnB,iBAAS,OAAO;AAAA,MAClB;AAAA,IACF;AACA,QAAI,SAAS,EAAE;AACf,UAAM,gBAAgB,CAAC;AACvB,WAAO,MAAM;AACX,oBAAc,KAAK,MAAM;AACzB,UAAI,QAAQ,MAAM,KAAK,CAAC,OAAO,QAAQ;AACrC;AAAA,MACF;AACA,eAAS,OAAO;AAAA,IAClB;AACA,WAAO;AAAA,EACT,CAAC,CAAC;AACF,MAAI,WAAW,IAAI,IAAI,cAAc,SAAS,QAAQ,CAAC,MAAM;AAC3D,cAAU,SAAS,IAAI,EAAE,MAAM;AAC/B,cAAU,SAAS,IAAI,EAAE,MAAM;AAC/B,aAAS,IAAI,EAAE,MAAM;AACrB,QAAI,EAAE,WAAW,SAAS;AACxB,UAAI,SAAS,EAAE,OAAO;AACtB,aAAO,UAAU,WAAW,SAAS;AACnC,iBAAS,IAAI,MAAM;AACnB,iBAAS,OAAO;AAAA,MAClB;AAAA,IACF;AACA,QAAI,SAAS,EAAE;AACf,UAAM,gBAAgB,CAAC;AACvB,WAAO,MAAM;AACX,oBAAc,KAAK,MAAM;AACzB,UAAI,QAAQ,MAAM,KAAK,CAAC,OAAO,QAAQ;AACrC;AAAA,MACF;AACA,eAAS,OAAO;AAAA,IAClB;AACA,WAAO;AAAA,EACT,CAAC,CAAC;AACF,SAAO;AAAA,IACL,UAAU,SAAS,UAAU,UAAU,QAAQ;AAAA,IAC/C,UAAU,IAAI,IAAI,cAAc,QAAQ;AAAA,IACxC,UAAU,SAAS,UAAU,UAAU,QAAQ;AAAA,IAC/C,UAAU,IAAI,IAAI,cAAc,QAAQ;AAAA,IACxC,UAAU,SAAS,UAAU,UAAU,QAAQ;AAAA,EACjD;AACF;AACA,SAAS,yBAAyB,WAAW,aAAa,aAAa,QAAQ,UAAU;AACvF,QAAM,OAAO,cAAc,YAAY,SAAS,WAAW,IAAI;AAC/D,MAAI,UAAU,QAAQ;AACpB;AAAA,MACE;AAAA,MACA;AAAA,IACF;AACA,WAAO,+BAA+B,WAAW,MAAM,WAAW;AAAA,EACpE;AACA,QAAM,UAAU,YAAY,QAAQ,SAAS;AAC7C,QAAM,kBAAkB,MAAM,QAAQ,kBAAkB,CAAC;AACzD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,MACE,UAAU,CAAC,GAAG,QAAQ,SAAS,CAAC;AAAA,MAChC,UAAU,CAAC,GAAG,QAAQ,SAAS,CAAC;AAAA,IAClC;AAAA,EACF;AACF;AACA,SAAS,+BAA+B,WAAW,MAAM,aAAa;AACpE,QAAM,UAAU,YAAY,QAAQ,SAAS;AAC7C,MAAI,gBAAgB;AAAA,IAClB,UAAU,QAAQ,QAAQ,QAAQ,SAAS,GAAG,CAAC,MAAM,KAAK,iBAAiB,EAAE,EAAE,CAAC,CAAC;AAAA,IACjF,UAAU,QAAQ,QAAQ,QAAQ,SAAS,GAAG,CAAC,MAAM,KAAK,iBAAiB,EAAE,EAAE,CAAC,CAAC;AAAA,EACnF;AACA,QAAM,eAAe,eAAe,OAAO;AAC3C,QAAM,SAAyB,oBAAI,IAAI;AAAA,IACrC,GAAG,QAAQ,kBAAkB;AAAA,IAC7B,GAAG;AAAA,MACD,KAAK,SAAS;AAAA,MACd,KAAK,CAAC,MAAM,EAAE,OAAO;AAAA,MACrB,QAAQ,CAAC,MAAM,MAAM,WAAW,aAAa,CAAC,CAAC;AAAA,IACjD;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
