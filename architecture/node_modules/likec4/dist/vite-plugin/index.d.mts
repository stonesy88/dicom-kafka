import { L as LikeC4LanguageServices } from '../shared/likec4.tyGQtUCS.mjs';
import '@likec4/core';
import 'type-fest';
import '/home/runner/work/likec4/likec4/node_modules/.pnpm/@types+picomatch@4.0.0/node_modules/@types/picomatch/posix.d.ts';
import '@likec4/core/types';
import '@likec4/core/utils';

type LikeC4VitePluginOptions = {
    /**
     * Initializes a LikeC4 instance from the specified workspace path.
     * By default it is vite project root.
     */
    workspace?: string;
    /**
     * By default, if LikeC4 model is invalid, errors are printed to the console.
     * Disable this behavior by setting this option to false.
     *
     * @default true
     */
    printErrors?: boolean;
    /**
     * If true, initialization will return rejected promise with the LikeC4 instance.
     * Use `likec4.getErrors()` to get the errors.
     * @default false
     */
    throwIfInvalid?: boolean;
    /**
     * Whether to use the `dot` binary for layouting or the WebAssembly version.
     * @default 'wasm'
     */
    graphviz?: 'wasm' | 'binary';
    /**
     * If you have instance of {@link LikeC4}
     * you can pass `languageServices` from it.
     */
    languageServices?: LikeC4LanguageServices;
    /**
     * @deprecated
     */
    useOverviewGraph?: boolean;
} | {
    languageServices: LikeC4LanguageServices;
    workspace?: never;
    printErrors?: never;
    throwIfInvalid?: never;
    graphviz?: never;
    useOverviewGraph?: boolean;
};
declare function LikeC4VitePlugin({ useOverviewGraph, ...opts }: LikeC4VitePluginOptions): any;

export { LikeC4VitePlugin, type LikeC4VitePluginOptions };
