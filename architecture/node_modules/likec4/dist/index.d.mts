import { ProjectId, DiagramView, NonEmptyArray } from '@likec4/core';
export { AbstractRelation, AutoLayoutDirection, BBox, Color, ComputedDeploymentView, ComputedDynamicView, ComputedEdge, ComputedElementView, ComputedLikeC4ModelData, ComputedNode, ComputedView, DeployedInstance, DeploymentElement, DeploymentNode, DeploymentNodeKind, DeploymentRelation, DeploymentView, DiagramEdge, DiagramNode, DiagramView, DynamicView, EdgeId, Element, ElementKind, ElementView, Fqn, HexColorLiteral, LayoutedLikeC4ModelData, LikeC4View, NodeId, ParsedLikeC4ModelData, Point, RelationExpr, RelationId, StepEdgeId, Tag, ThemeColor, ViewId, XYPoint } from '@likec4/core';
import { LikeC4Model } from '@likec4/core/model';
export { AnyAux, Aux, LikeC4DeploymentModel, LikeC4Model, LikeC4ViewModel } from '@likec4/core/model';
import { W as WorkspaceFolder, a as LikeC4Services, G as GraphvizLayouter, L as LikeC4LanguageServices, b as LikeC4Views, R as Range } from './shared/likec4.tyGQtUCS.mjs';
import 'type-fest';
import '/home/runner/work/likec4/likec4/node_modules/.pnpm/@types+picomatch@4.0.0/node_modules/@types/picomatch/posix.d.ts';
import '@likec4/core/types';
import '@likec4/core/utils';

type Logger = {
    info(msg: string): void;
    warn(msg: unknown): void;
    error(err: unknown): void;
};

declare class CliWorkspace {
    private services;
    private isInitialized;
    constructor(services: CliServices);
    initWorkspace(workspace: WorkspaceFolder): Promise<void>;
    init(): Promise<void>;
}

type CliAddedServices = {
    logger: Logger;
    likec4: {
        Layouter: GraphvizLayouter;
    };
    cli: {
        Workspace: CliWorkspace;
    };
};
type CliServices = LikeC4Services & CliAddedServices;
type CreateLanguageServiceOptions = {
    /**
     * Whether to use the file system for the language service.
     * @default true
     */
    useFileSystem?: boolean;
    /**
     * Logger to use for the language service.
     * @default 'default'
     */
    logger?: Logger | 'vite' | 'default' | false;
    /**
     * Whether to use the `dot` binary for layouting or the WebAssembly version.
     * @default 'wasm'
     */
    graphviz?: 'wasm' | 'binary';
};
declare function createLanguageServices(opts?: CreateLanguageServiceOptions): CliServices;

type LikeC4Langium = ReturnType<typeof createLanguageServices>;
type LikeC4Options = {
    /**
     * By default, if LikeC4 model is invalid, errors are printed to the console.
     * Disable this behavior by setting this option to false.
     *
     * @default true
     */
    printErrors?: boolean;
    /**
     * If true, initialization will return rejected promise with the LikeC4 instance.
     * Use `likec4.getErrors()` to get the errors.
     * @default false
     */
    throwIfInvalid?: boolean;
    /**
     * Logger to use for the language service.
     * false - no output
     * @default 'default'
     */
    logger?: Logger | 'vite' | 'default' | false;
    /**
     * Whether to use the `dot` binary for layouting or the WebAssembly version.
     * @default 'wasm'
     */
    graphviz?: 'wasm' | 'binary';
};
declare class LikeC4 {
    readonly workspace: string;
    readonly langium: LikeC4Langium;
    private isPrintErrorEnabled;
    static fromSource(likec4SourceCode: string, opts?: LikeC4Options): Promise<LikeC4>;
    /**
     * Prevents multiple instances of LikeC4 for the same workspace
     */
    private static likec4Instances;
    /**
     * Initializes a LikeC4 instance from the specified workspace path.
     * By default in current folder
     */
    static fromWorkspace(path?: string, opts?: LikeC4Options): Promise<LikeC4>;
    private logger;
    private constructor();
    get languageServices(): LikeC4LanguageServices;
    get viewsService(): LikeC4Views;
    private get LangiumDocuments();
    ensureSingleProject(): void;
    /**
     * Diagram is a computed view, layouted using Graphviz
     * Used in React components
     */
    diagrams(projectId?: ProjectId | undefined): Promise<DiagramView[]>;
    /**
     * Builds LikeC4Model from all documents
     * Only computes view predicates {@link ComputedView} - i.e. no layout
     * Not ready for rendering, but enough to traverse
     */
    computedModel(project?: ProjectId | undefined): LikeC4Model.Computed;
    projects(): Promise<NonEmptyArray<ProjectId>>;
    /**
     * Same as {@link computedModel()}, but also applies layout
     * Ready for rendering
     */
    layoutedModel(project?: ProjectId | undefined): Promise<LikeC4Model.Layouted>;
    getErrors(): {
        message: string;
        line: number;
        range: Range;
        sourceFsPath: string;
    }[];
    hasErrors(): boolean;
    /**
     * @returns true if there are errors
     */
    printErrors(): boolean;
    /**
     * TODO Replace with watcher
     */
    notifyUpdate({ changed, removed }: {
        changed?: string;
        removed?: string;
    }): Promise<boolean>;
    /**
     * @returns a function to dispose the listener
     */
    onModelUpdate(listener: () => void): () => void;
    dispose(): void;
}

export { LikeC4 };
